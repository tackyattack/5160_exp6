C51 COMPILER V6.02  FILE_SYSTEM                                                            11/20/2019 23:40:29 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE FILE_SYSTEM
OBJECT MODULE PLACED IN .\file_system.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\file_system.c DEBUG OBJECTEXTEND PRINT(.\file_system.lst) OBJECT(
                    -.\file_system.obj) 

stmt level    source

   1          #include <stdio.h>
   2          #include "main.h"
   3          #include "sector_reader.h"
   4          #include "Directory_Functions_struct.h"
   5          #include "UART.h"
   6          #include "SPI.h"
   7          #include "print_bytes.h"
   8          #include "file_system.h"
   9          
  10          // Private constants (outside doesn't need to see these)
  11          #define MBR_BPB_sec_offset              (0x01C6)
  12          #define BPB_BytesPerSector_offset       (0x000B)
  13          #define BPB_SectorsPerCluster_offset    (0x000D)
  14          #define BPB_RsvdSectorCount_offset      (0x000E)
  15          #define BPB_NumberFATs_offset           (0x0010)
  16          #define BPB_RootEntryCount_offset       (0x0011)
  17          #define BPB_TotSec16_offset             (0x0013)
  18          #define BPB_FATSz16_offset              (0x0016)
  19          #define BPB_FATSz32_offset              (0x0024)
  20          #define BPB_TotSec32_offset             (0x0020)
  21          #define BPB_RootClus_offset             (0x002C)
  22          
  23          
  24          uint8_t mount_drive(uint8_t xdata *xram_data_array)
  25          {
  26   1        uint8_t temp8, NumFAT;
  27   1        uint16_t temp16, RootEntCnt, RsvdSecCnt, FATSz16, TotSec16;
  28   1        uint32_t ClusterCount, FATSz, TotSec, DataSec, MBR_RelSec, RootClus;
  29   1        uint8_t *data_array;
  30   1        FS_values_t *drive_values;
  31   1        data_array = xram_data_array; // cast xdata to uint8_t since all other functions don't use xdata
  32   1      
  33   1        drive_values = Export_Drive_values();
  34   1      
  35   1      
  36   1        // Find the BIOS parameter block (BPB)
  37   1        printf("Finding BIOS parameter block\n");
  38   1        Read_Sector(0, 512, data_array);
  39   1        temp8 = read8(0, data_array); // check first byte
  40   1        MBR_RelSec = 0;
  41   1        if((temp8!=0xEB) && (temp8!=0xE9))
  42   1        {
  43   2          // likely MBR
  44   2          // If we're in the MBR, then get the offset for the BPB
  45   2          MBR_RelSec = read32(MBR_BPB_sec_offset, data_array);
  46   2          // now read the start of BPB
  47   2          Read_Sector(MBR_RelSec, 512, data_array);
  48   2          temp8 = read8(0, data_array);
  49   2        }
  50   1      
  51   1        // now check if we've made it into the BPB by checking for the jump instruction
  52   1        if((temp8!=0xEB) && (temp8!=0xE9))
  53   1        {
  54   2          printf("error: could not locate BPB\n");
C51 COMPILER V6.02  FILE_SYSTEM                                                            11/20/2019 23:40:29 PAGE 2   

  55   2          return MOUNT_FAIL;
  56   2        }
  57   1      
  58   1      
  59   1        // ------- Read in BIOS parameter block -------
  60   1        drive_values->BytesPerSec = read16(BPB_BytesPerSector_offset, data_array);
  61   1      
  62   1        // set shift value (used by print directory function)
  63   1        drive_values->BytesPerSecShift = 0;
  64   1      
  65   1        temp16 = drive_values->BytesPerSec;
  66   1        // shift right by one bit position until we've moved it all the way out
  67   1        while(temp16 != 0x01)
  68   1        {
  69   2           drive_values->BytesPerSecShift++;
  70   2           temp16 = temp16>>1;
  71   2        }
  72   1      
  73   1        drive_values->SecPerClus  = read8(BPB_SectorsPerCluster_offset, data_array);
  74   1      
  75   1        RsvdSecCnt  = read16(BPB_RsvdSectorCount_offset, data_array);
  76   1        NumFAT      = read8(BPB_NumberFATs_offset, data_array);
  77   1        RootEntCnt  = read16(BPB_RootEntryCount_offset, data_array);
  78   1        FATSz16     = read16(BPB_FATSz16_offset, data_array);
  79   1        TotSec16    = read16(BPB_TotSec16_offset, data_array);
  80   1        RootClus    = read32(BPB_RootClus_offset, data_array);
  81   1      
  82   1      
  83   1        if(FATSz16 != 0)
  84   1        {
  85   2          FATSz = read16(BPB_FATSz16_offset, data_array);
  86   2        }
  87   1        else
  88   1        {
  89   2          FATSz = read32(BPB_FATSz32_offset, data_array);
  90   2        }
  91   1      
  92   1        if(TotSec16 != 0)
  93   1        {
  94   2          TotSec = TotSec16;
  95   2        }
  96   1        else
  97   1        {
  98   2          TotSec = read32(BPB_TotSec32_offset, data_array);
  99   2        }
 100   1      
 101   1        // Determine how many sectors are in the root directory
 102   1        drive_values->RootDirSecs = ((RootEntCnt * 32) + (drive_values->BytesPerSec - 1)) / (drive_values->Bytes
             -PerSec);
 103   1      
 104   1        // Determine how many sectors are data sectors
 105   1        DataSec = TotSec - (RsvdSecCnt + (NumFAT*FATSz) + drive_values->RootDirSecs);
 106   1      
 107   1        // Determine first sector of FAT
 108   1        drive_values->StartofFAT = RsvdSecCnt + MBR_RelSec;
 109   1      
 110   1        // Determine the first sector of the data area
 111   1        drive_values->FirstDataSec = drive_values->StartofFAT + (NumFAT*FATSz) + drive_values->RootDirSecs;
 112   1      
 113   1        // Determine count of clusters and FAT type
 114   1        ClusterCount = DataSec / drive_values->SecPerClus;
 115   1        if(ClusterCount < 4085)
C51 COMPILER V6.02  FILE_SYSTEM                                                            11/20/2019 23:40:29 PAGE 3   

 116   1        {
 117   2          // FAT12
 118   2          printf("error: FAT12 unsupported\n");
 119   2          return MOUNT_FAIL;
 120   2        }
 121   1        else if(ClusterCount < 65525)
 122   1        {
 123   2          // FAT16
 124   2          drive_values->FATtype = FAT16;
 125   2          printf("FAT16 detected\n");
 126   2          drive_values->FirstRootDirSec = drive_values->StartofFAT + (NumFAT*FATSz);
 127   2        }
 128   1        else
 129   1        {
 130   2          // FAT32
 131   2          drive_values->FATtype = FAT32;
 132   2          printf("FAT32 detected\n");
 133   2          drive_values->FirstRootDirSec = ((RootClus-2)*drive_values->SecPerClus) + drive_values->FirstDataSec;
 134   2        }
 135   1      
 136   1        return MOUNT_SUCCESS;
 137   1      }
 138          
 139          uint32_t first_sector(uint32_t cluster_num)
 140          {
 141   1        FS_values_t *drive_values = Export_Drive_values();
 142   1      
 143   1        // Calculate starting sector of cluster
 144   1        if(cluster_num == 0)
 145   1        {
 146   2          return drive_values->FirstRootDirSec;
 147   2        }
 148   1        else
 149   1        {
 150   2          return ((cluster_num - 2)*drive_values->SecPerClus) + drive_values->FirstDataSec;
 151   2        }
 152   1      }
 153          
 154          uint32_t find_next_clus(uint32_t cluster_num, uint8_t xdata *xram_data_array)
 155          {
 156   1        uint8_t *data_array;
 157   1        uint16_t FAToffset;
 158   1        uint32_t sector, next_clus;
 159   1        FS_values_t *drive_values = Export_Drive_values();
 160   1      
 161   1        data_array = xram_data_array; // cast xdata to uint8_t since all other functions don't use xdata
 162   1      
 163   1        // FATtype will be either 2 (FAT16) or 4 (FAT32)
 164   1        sector = ((cluster_num*drive_values->FATtype)/drive_values->BytesPerSec) + drive_values->StartofFAT;
 165   1        Read_Sector(sector, drive_values->BytesPerSec, data_array);
 166   1      
 167   1        // Determine the offset of the cluster within this sector
 168   1        FAToffset = (uint16_t)((cluster_num*drive_values->FATtype)%(drive_values->BytesPerSec));
 169   1      
 170   1        // Read the cluster entry from the FAT sector
 171   1        if(drive_values->FATtype == FAT32)
 172   1        {
 173   2          return (read32(FAToffset, data_array)&0x0FFFFFFF);
 174   2        }
 175   1        else if(drive_values->FATtype == FAT16)
 176   1        {
 177   2          next_clus = (uint32_t)(read16(FAToffset, data_array)&0xFFFF);
C51 COMPILER V6.02  FILE_SYSTEM                                                            11/20/2019 23:40:29 PAGE 4   

 178   2      
 179   2          // modify EOF to match for FAT32
 180   2          if(next_clus == 0xFFFF)
 181   2          {
 182   3            return 0x0FFFFFFF;
 183   3          }
 184   2          else
 185   2          {
 186   3            return next_clus;
 187   3          }
 188   2        }
 189   1        else
 190   1        {
 191   2          printf("Error: FAT type unsupported\n");
 192   2          return 0;
 193   2        }
 194   1      
 195   1        printf("Error: couldn't find next cluster\n");
 196   1        return 0;
 197   1      }
 198          
 199          
 200          // void print_file(uint32_t cluster_num, uint8_t xdata *xram_data_array)
 201          // {
 202          //    uint32_t base_sector, sector_offset;
 203          //    uint8_t temp8;
 204          //    uint8_t *data_array;
 205          //    FS_values_t *drive_values = Export_Drive_values();
 206          //    data_array = xram_data_array; // cast xdata to uint8_t since all other functions don't use xdata
 207          //
 208          //    sector_offset = 0; // start at first sector
 209          //
 210          //    printf(" **** Opening File ****\n");
 211          //    printf("Press 'e' to exit\n");
 212          //    printf("Press 'n' to print nextn sector\n");
 213          //
 214          //    do
 215          //    {
 216          //       // check if we need to find the first sector of the cluster
 217          //       if(sector_offset == 0) base_sector = first_sector(cluster_num);
 218          //
 219          //       // read the sector in
 220          //       Read_Sector((base_sector+sector_offset), drive_values->BytesPerSec, data_array);
 221          //
 222          //
 223          //       printf(" **** cluster: %lu   sector: %lu ****\n", cluster_num, base_sector+sector_offset);
 224          //       print_memory(data_array, drive_values->BytesPerSec);
 225          //
 226          //       sector_offset++; // go forward one sector
 227          //
 228          //       // check if we need to go to the next cluster
 229          //       if(sector_offset == drive_values->SecPerClus)
 230          //       {
 231          //         cluster_num = find_next_clus(cluster_num, data_array);
 232          //         sector_offset = 0;
 233          //       }
 234          //
 235          //       // wait for user to choose an action
 236          //       do
 237          //       {
 238          //         temp8 = getchar();
 239          //       }while((temp8!='e') && (temp8!='n'));
C51 COMPILER V6.02  FILE_SYSTEM                                                            11/20/2019 23:40:29 PAGE 5   

 240          //
 241          //    }while(temp8 != 'e');
 242          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1498    ----
   CONSTANT SIZE    =    181    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      65
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
