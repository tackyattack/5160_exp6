C51 COMPILER V6.02  EXP_6_MAIN                                                             11/21/2019 16:18:47 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE EXP_6_MAIN
OBJECT MODULE PLACED IN .\exp_6_main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\exp_6_main.c PRINT(.\exp_6_main.lst) OBJECT(.\exp_6_main.obj) 

stmt level    source

   1          #include <stdio.h>
   2          #include "main.h"
   3          #include "PORT.H"
   4          #include "Directory_Functions_struct.h"
   5          #include "file_system.h"
   6          #include "LED_Control.h"
   7          #include "SPI.h"
   8          #include "SDCard.h"
   9          #include "print_bytes.h"
  10          #include "Timer0_hardware_delay_1ms.h"
  11          #include "UART.h"
  12          #include "LCD_Routines.h"
  13          #include "Long_Serial_In.h"
  14          #include "Outputs.h"
  15          #include "player.h"
  16          #include "STA013_config.h"
  17          #include "I2C.h"
  18          
  19          xdata uint8_t buf1[512];
  20          xdata uint8_t buf2[512];
  21          uint8_t code LCD_str_start[]="Starting...";
  22          
  23          void timer0_ISR (void) interrupt 1
  24          {
  25   1        player_state_machine_runner();
  26   1      }
  27          
  28          
  29          main()
  30          {
  31   1         uint8_t idata error_flag;
  32   1         uint32_t idata entry_num, cwd_entries;
  33   1         uint32_t idata cwd, clus;
  34   1      
  35   1         AUXR=0x0c;   // make all of XRAM available, ALE always on
  36   1         if(OSC_PER_INST==6)
  37   1         {
  38   2             CKCON0=0x01;  // set X2 clock mode
  39   2         }
  40   1         else if(OSC_PER_INST==12)
  41   1         {
  42   2             CKCON0=0x00;  // set standard clock mode
  43   2         }
  44   1      
  45   1         LEDS_ON(Red_LED);
  46   1         P2_set_bit(0x0F);
  47   1      
  48   1         Timer0_DELAY_1ms(300);
  49   1         uart_init(9600);
  50   1      
  51   1         if(STA013_init() != no_errors) while(1);
  52   1      
  53   1         LCD_Init();
  54   1         LCD_Print(0x00, sizeof(LCD_str_start)-1, LCD_str_start);
  55   1         printf("starting program...\n");
C51 COMPILER V6.02  EXP_6_MAIN                                                             11/21/2019 16:18:47 PAGE 2   

  56   1      
  57   1         // My SD card won't init at 400kHz, so using 200kHz
  58   1         error_flag=SPI_Master_Init(200000UL);
  59   1         if(error_flag!=no_errors)
  60   1         {
  61   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  62   2      	    UART_Transmit('S');
  63   2            while(1);
  64   2         }
  65   1         LEDS_ON(Amber_LED);
  66   1         // SD Card Initialization
  67   1         error_flag=SD_card_init();
  68   1         if(error_flag!=no_errors)
  69   1         {
  70   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  71   2      	  UART_Transmit('C');
  72   2            while(1);
  73   2         }
  74   1         LEDS_OFF(Amber_LED);
  75   1         error_flag=SPI_Master_Init(20000000UL);
  76   1         if(error_flag!=no_errors)
  77   1         {
  78   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  79   2      	    UART_Transmit('P');
  80   2            while(1);
  81   2         }
  82   1      
  83   1         printf("Mounting SD card\n");
  84   1         if(mount_drive(buf1) == MOUNT_SUCCESS)
  85   1         {
  86   2           printf("SD card mounted\n");
  87   2           LEDS_OFF(Red_LED);
  88   2           LEDS_ON(Green_LED);
  89   2         }
  90   1         else
  91   1         {
  92   2           printf("SD card failed to mount\n");
  93   2           while(1);
  94   2         }
  95   1      
  96   1         printf("Root directory:\n\n");
  97   1         cwd = Export_Drive_values()->FirstRootDirSec; // start out at root directory
  98   1      
  99   1         TMOD = (TMOD & 0xF0) | 0x01;  /* Set T/C0 Mode */
 100   1         ET0 = 1;                      /* Enable Timer 0 Interrupts */
 101   1         TR0 = 1;                      /* Start Timer 0 Running */
 102   1         EA = 1;                       /* Global Interrupt Enable */
 103   1      
 104   1         while(1)
 105   1         {
 106   2           cwd_entries = Print_Directory(cwd, buf1);
 107   2           printf("Enter an entry number: \n");
 108   2           entry_num = long_serial_input();
 109   2           printf("%lu  ", entry_num);
 110   2           printf("%lu  \n", cwd);
 111   2           // check to make sure entry is within the cwd
 112   2           if(entry_num <= cwd_entries)
 113   2           {
 114   3             clus = Read_Dir_Entry(cwd, entry_num, buf1);
 115   3             if(clus & directory_bit)
 116   3             {
 117   4               clus &= 0x0FFFFFFF; // mask off upper four bits to print another directory
C51 COMPILER V6.02  EXP_6_MAIN                                                             11/21/2019 16:18:47 PAGE 3   

 118   4               cwd = first_sector(clus);
 119   4             }
 120   3             else
 121   3             {
 122   4               init_player(clus);
 123   4               //while(player_state_machine_runner() == PLAYER_RUNNING);
 124   4             }
 125   3           }
 126   2           else
 127   2           {
 128   3             printf("Error: invalid entry choice\n");
 129   3           }
 130   2         }
 131   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    498    ----
   CONSTANT SIZE    =    178    ----
   XDATA SIZE       =   1024    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----      17
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
