C51 COMPILER V6.02  SDCARD                                                                 11/21/2019 16:42:11 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE SDCARD
OBJECT MODULE PLACED IN .\SDCard.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\SDCard.c PRINT(.\SDCard.lst) OBJECT(.\SDCard.obj) 

stmt level    source

   1          #include "AT89C51RC2.h"
   2          #include "PORT.H"
   3          #include "main.h"
   4          #include "SDCard.h"
   5          #include "print_bytes.h"
   6          #include "SPI.h"
   7          #include <stdio.h>
   8          #include "Outputs.h"
   9          #include "LED_Control.h"
  10          
  11          static uint8_t idata SD_Card_Type;
  12          
  13          /***********************************************************************
  14          DESC:    Sends Commands to SD card using the SPI peripheral
  15                   cmnd=Command number to be sent
  16                   argum=32bit argument for a command
  17          RETURNS: error flag
  18          CAUTION: Must be followed by a read to capture SD card response
  19                   nCS0 must be set/cleared outside of this routine
  20          ************************************************************************/
  21          uint8_t SEND_COMMAND(uint8_t cmnd, uint32_t argum)
  22          {
  23   1       uint8_t SPI_send, return_val, SPI_return, error_flag;
  24   1      
  25   1       return_val=no_errors;
  26   1       if(cmnd<64)
  27   1       {
  28   2         SPI_send=cmnd | 0x40;
  29   2         error_flag=SPI_Transfer(SPI_send,&SPI_return);
  30   2         if((error_flag)==no_errors)
  31   2         {
  32   3           SPI_send=argum>>24;   // MSB
  33   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  34   3         }
  35   2         else
  36   2         {
  37   3           return_val=SPI_error;
  38   3         }
  39   2         if((return_val==no_errors)&&(error_flag==no_errors))
  40   2         {
  41   3           argum=argum & 0x00ffffff;
  42   3           SPI_send=argum>>16;  // BYTE2
  43   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  44   3         }
  45   2         else
  46   2         {
  47   3           return_val=SPI_error;
  48   3         }
  49   2         if((return_val==no_errors)&&(error_flag==no_errors))
  50   2         {
  51   3           argum=argum & 0x0000ffff;
  52   3           SPI_send=argum>>8;   // BYTE1
  53   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  54   3         }
  55   2         else
C51 COMPILER V6.02  SDCARD                                                                 11/21/2019 16:42:11 PAGE 2   

  56   2         {
  57   3           return_val=SPI_error;
  58   3         }
  59   2         if((return_val==no_errors)&&(error_flag==no_errors))
  60   2         {
  61   3           SPI_send=argum & 0x000000ff;  // LSB
  62   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  63   3         }
  64   2         else
  65   2         {
  66   3           return_val=SPI_error;
  67   3         }
  68   2         if((return_val==no_errors)&&(error_flag==no_errors))
  69   2         {
  70   3            if (cmnd == 0)
  71   3            {
  72   4               SPI_send=0x95;  // CRC7 and end bit for CMD0
  73   4            }
  74   3            else if (cmnd == 8)
  75   3            {
  76   4               SPI_send=0x87;   // CRC7 and end bit for CMD8
  77   4            }
  78   3            else
  79   3            {
  80   4               SPI_send=0x01;  // end bit only for other commands
  81   4            }
  82   3            error_flag=SPI_Transfer(SPI_send,&SPI_return);
  83   3          }
  84   2       }
  85   1       else
  86   1       {
  87   2         return_val=illegal_cmnd;
  88   2       }
  89   1       return return_val;
  90   1      }
  91          /***********************************************************************
  92          DESC:    Read values from SPI port, 0xff sent for each byte read
  93          		 num_bytes=number of bytes to read
  94          RETURNS: error flag
  95                   *valout=address of array of bytes read
  96          CAUTION: Used to capture SD card response
  97                   nCS0 must be set/cleared outside of this routine
  98          ************************************************************************/
  99          uint8_t response(uint8_t num_bytes, uint8_t * valout_p)
 100          {
 101   1         uint8_t index,return_val,error_flag, SPI_return;
 102   1      
 103   1         return_val=no_errors;
 104   1         do
 105   1         {
 106   2            error_flag=SPI_Transfer(0xFF,&SPI_return);
 107   2            index++;
 108   2         }while(((SPI_return&0x80)==0x80)&&(index!=0)&&(error_flag==no_errors));
 109   1         if(error_flag!=no_errors)
 110   1         {
 111   2            return_val=SPI_error;
 112   2         }
 113   1         else if(index==0)
 114   1         {
 115   2            return_val=sd_timeout_error;
 116   2         }
 117   1         else
C51 COMPILER V6.02  SDCARD                                                                 11/21/2019 16:42:11 PAGE 3   

 118   1         {
 119   2           *valout_p=SPI_return;
 120   2           if((SPI_return==0x00)||(SPI_return==0x01))
 121   2           {
 122   3             if(num_bytes>1)
 123   3             {
 124   4               for(index=1;index<num_bytes;index++)
 125   4               {
 126   5                  error_flag=SPI_Transfer(0xFF,&SPI_return);
 127   5                  *(valout_p+index)=SPI_return;
 128   5               }
 129   4             }
 130   3           }
 131   2           else
 132   2           {
 133   3              return_val=response_error;
 134   3           }
 135   2         }
 136   1         error_flag=SPI_Transfer(0xFF,&SPI_return);  // send 8 more clock cycles to complete read
 137   1         return return_val;
 138   1      }
 139          
 140          
 141          /**********************************************************************
 142          DESC:    Reads a specifed number of bytes from SD card,
 143                   0xff sent for each byte read
 144          RETURNS: error flag
 145                   block of data stored in array_out[]
 146          CAUTION: Used to capture SD card response
 147                   nCS0 must be set/cleared outside of this routine
 148          ************************************************************************/
 149          uint8_t read_block(uint16_t num_bytes, uint8_t * array_out_p)
 150          {
 151   1         uint8_t error_flag,return_val,SPI_return;
 152   1         uint16_t index;
 153   1         index=0;
 154   1         return_val=no_errors;
 155   1         do
 156   1         {
 157   2            error_flag=SPI_Transfer(0xFF,&SPI_return);
 158   2            index++;
 159   2         }while(((SPI_return&0x80)==0x80)&&(index!=0)&&(error_flag==no_errors));
 160   1         if(error_flag!=no_errors)
 161   1         {
 162   2            return_val=SPI_error;
 163   2         }
 164   1         else if(index==0)
 165   1         {
 166   2            return_val=sd_timeout_error;
 167   2         }
 168   1         else
 169   1         {
 170   2           if (SPI_return==0x00)
 171   2           {
 172   3              index=0;
 173   3      	    do
 174   3              {
 175   4                 error_flag=SPI_Transfer(0xFF,&SPI_return);
 176   4                 index++;
 177   4              }while((SPI_return==0xFF)&&(index!=0)&&(error_flag==no_errors));          // wait for data token r
             -esponse
 178   3              if(error_flag!=no_errors)
C51 COMPILER V6.02  SDCARD                                                                 11/21/2019 16:42:11 PAGE 4   

 179   3              {
 180   4                 return_val=SPI_error;
 181   4              }
 182   3              else if(index==0)
 183   3              {
 184   4                return_val=sd_timeout_error;
 185   4              }
 186   3              else if(SPI_return==0xfe)
 187   3              {
 188   4                for(index=0;index<num_bytes;index++)
 189   4                {
 190   5                   error_flag=SPI_Transfer(0xFF,&SPI_return);
 191   5                   *(array_out_p + index)=SPI_return;
 192   5                }
 193   4                error_flag=SPI_Transfer(0xFF,&SPI_return); // discard byte 1 of CRC16
 194   4                error_flag=SPI_Transfer(0xFF,&SPI_return); // discard byte 2 of CRC16
 195   4              }
 196   3      	    else
 197   3      	    {
 198   4      	      return_val=data_error;
 199   4      	    }
 200   3           }
 201   2           else
 202   2           {
 203   3              return_val=response_error;
 204   3           }
 205   2         }
 206   1       error_flag=SPI_Transfer(0xFF,&SPI_return);// send 8 more clock cycles to complete read
 207   1      return return_val;
 208   1      }
 209          
 210          
 211          /**********************************************************************
 212          DESC:    Sends the commands needed to initialize the SD card
 213          RETURNS: error flag
 214          CAUTION:
 215          ************************************************************************/
 216          uint8_t SD_card_init(void)
 217          {
 218   1         uint8_t i,error_status,error_flag,valsout[8],SPI_return;
 219   1         uint32_t argument;
 220   1         uint32_t timeout;
 221   1         error_status=no_errors;
 222   1         SD_Card_Type=unknown;
 223   1         SPI_Select_Set(SD_Card_Select);  //nCS0=1;
 224   1         printf("SD Card Initialization ... \n\r");
 225   1         for(i=0;i<10;i++)
 226   1         {
 227   2             error_flag=SPI_Transfer(0xFF,&SPI_return);
 228   2         }
 229   1         LEDS_ON(Green_LED);  //GREENLED=0;
 230   1         printf("CMD0 sent ... ");
 231   1         SPI_Select_Clear(SD_Card_Select); //nCS0=0;  // SD card CS low
 232   1         error_flag=SEND_COMMAND(CMD0,0);
 233   1         if(error_flag==no_errors)
 234   1         {
 235   2           error_flag=response(1,valsout);
 236   2           printf("Response = %2.2bX\n\r",valsout[0]);
 237   2         }
 238   1         else
 239   1         {
 240   2      	 LEDS_ON(Red_LED); //REDLED=0;  // indicates error has occured.
C51 COMPILER V6.02  SDCARD                                                                 11/21/2019 16:42:11 PAGE 5   

 241   2         }
 242   1         SPI_Select_Set(SD_Card_Select);  //nCS0=1;
 243   1         LEDS_OFF(Green_LED); //GREENLED=1;
 244   1         if(error_flag!=no_errors)
 245   1         {
 246   2           error_status=error_flag;
 247   2         }
 248   1         if(error_status==no_errors)
 249   1         {
 250   2           LEDS_ON(Green_LED);  //GREENLED=0;
 251   2           printf("CMD8 sent ... ");
 252   2           SPI_Select_Clear(SD_Card_Select); //nCS0=0;  // SD card CS low
 253   2           error_flag=SEND_COMMAND(CMD8,0x000001AA);
 254   2      	 if(error_flag==no_errors)
 255   2           {
 256   3              error_flag=response(5,valsout);
 257   3      		SPI_Select_Set(SD_Card_Select);  //nCS0=1;
 258   3      		LEDS_OFF(Green_LED); //GREENLED=1;
 259   3      	    if(error_flag!=no_errors)
 260   3      	    {
 261   4      	        printf("Response = ");
 262   4      		    printf("%2.2bX \n\r",valsout[0]);
 263   4      		    if((error_flag==response_error)&&(valsout[0]==0x05))
 264   4                  {
 265   5                      error_status=no_errors;
 266   5      		        SD_Card_Type=Standard_Capacity;
 267   5      		        printf("Version 1 SD Card detected.\n\r");
 268   5      		        printf("Standard Capacity Card detected.\n\r");
 269   5                   }
 270   4      		     else
 271   4      		     {
 272   5      		        error_status=error_flag;
 273   5      		     }
 274   4      	    }
 275   3      		else
 276   3      		{
 277   4      	        printf("Response = ");
 278   4                  for(i=0;i<5;i++)
 279   4      		    {
 280   5      		        printf("%2.2bX ",valsout[i]);
 281   5      		    }
 282   4                  putchar(CR);
 283   4                  putchar(LF);
 284   4      		    if(valsout[4]!=0xAA)
 285   4      		    {
 286   5      		        error_flag=response_error;
 287   5      		    }
 288   4      			SD_Card_Type=Ver2;
 289   4      		    printf("Version 2 SD Card detected.\n\r");
 290   4               }
 291   3      	 }
 292   2           else
 293   2           {
 294   3              SPI_Select_Set(SD_Card_Select);  //nCS0=1;
 295   3              LEDS_OFF(Green_LED); //GREENLED=1;
 296   3      	    LEDS_ON(Red_LED); //REDLED=0;  // indicates error has occured.
 297   3           }
 298   2         }
 299   1         if(error_status==no_errors)
 300   1         {
 301   2           LEDS_ON(Green_LED);  //GREENLED=0;
 302   2           printf("CMD58 sent ... ");
C51 COMPILER V6.02  SDCARD                                                                 11/21/2019 16:42:11 PAGE 6   

 303   2           SPI_Select_Clear(SD_Card_Select); //nCS0=0;  // SD card CS low
 304   2           error_flag=SEND_COMMAND(CMD58,0);
 305   2      	 if(error_flag==no_errors)
 306   2           {
 307   3              error_flag=response(5,valsout);
 308   3      		SPI_Select_Set(SD_Card_Select);  //nCS0=1;
 309   3      		LEDS_OFF(Green_LED); //GREENLED=1;
 310   3      	    printf("Response = ");
 311   3              for(i=0;i<5;i++)
 312   3      		{
 313   4      		     printf("%2.2bX ",valsout[i]);
 314   4      		}
 315   3              putchar(CR);
 316   3              putchar(LF);
 317   3      		if((valsout[2]&0xFC)!=0xFC)
 318   3      		{
 319   4      		   error_flag=voltage_error;
 320   4      		}
 321   3           }
 322   2           else
 323   2           {
 324   3              SPI_Select_Set(SD_Card_Select);  //nCS0=1;
 325   3              LEDS_OFF(Green_LED); //GREENLED=1;
 326   3      	    LEDS_ON(Red_LED); //REDLED=0;  // indicates error has occured.
 327   3           }
 328   2      	 if(error_flag!=no_errors)
 329   2      	 {
 330   3      	    error_status=error_flag;
 331   3      	 }
 332   2         }
 333   1         if(error_status==no_errors)
 334   1         {
 335   2           if(SD_Card_Type==Ver2)
 336   2      	 {
 337   3      	    argument=0x40000000;
 338   3      	 }
 339   2      	 else
 340   2      	 {
 341   3      	    argument=0;
 342   3      	 }
 343   2      	 timeout=0;
 344   2           LEDS_ON(Yellow_LED);  //GREENLED=0;
 345   2           printf("ACMD41 sent ... ");
 346   2           //SPI_Select_Clear(SD_Card_Select); //nCS0=0;  // SD card CS low
 347   2      	 do
 348   2      	 {
 349   3      	    SPI_Select_Clear(SD_Card_Select); //nCS0=0;  // SD card CS low
 350   3      	    error_flag=SEND_COMMAND(CMD55,0);
 351   3      		if(error_flag==no_errors)  error_flag=response(1,valsout);
 352   3      		//P3_5=1;
 353   3      	    if((valsout[0]==0x01)||(valsout[0]==0x00))
 354   3      		   error_flag=SEND_COMMAND(ACMD41,argument);
 355   3      	    if(error_flag==no_errors) response(1,valsout);
 356   3              SPI_Select_Set(SD_Card_Select); //nCS0=1;
 357   3              //printf("Response = %2.2bX\n\r",valsout[0]);
 358   3      		timeout++;
 359   3      		if(timeout==0) error_flag=sd_timeout_error;
 360   3      	   }while(((valsout[0]&0x01)==0x01)&&(error_flag==no_errors));
 361   2      	 if(error_flag==no_errors)
 362   2           {
 363   3              LEDS_OFF(Yellow_LED); //GREENLED=1;
 364   3      	    printf("Response = %2.2bX\n\r",valsout[0]);
C51 COMPILER V6.02  SDCARD                                                                 11/21/2019 16:42:11 PAGE 7   

 365   3           }
 366   2           else
 367   2           {
 368   3              LEDS_OFF(Green_LED); //GREENLED=1;
 369   3      	    LEDS_ON(Red_LED); //REDLED=0;  // indicates error has occured.
 370   3           }
 371   2           //SPI_Select_Set(SD_Card_Select);
 372   2           printf("Timeout = %lu \n\r",timeout);
 373   2      	 if(error_flag!=no_errors)
 374   2      	 {
 375   3      	    error_status=error_flag;
 376   3      	 }
 377   2         }
 378   1         if((error_status==no_errors)&&(SD_Card_Type==Ver2))
 379   1         {
 380   2           LEDS_ON(Green_LED);  //GREENLED=0;
 381   2           printf("CMD58 sent ... ");
 382   2           SPI_Select_Clear(SD_Card_Select); //nCS0=0;  // SD card CS low
 383   2           error_flag=SEND_COMMAND(CMD58,0);
 384   2      	 if(error_flag==no_errors)
 385   2           {
 386   3              error_flag=response(5,valsout);
 387   3      		SPI_Select_Set(SD_Card_Select); //nCS0=1;
 388   3              LEDS_OFF(Green_LED); //GREENLED=1;
 389   3      	    printf("Response = ");
 390   3              for(i=0;i<5;i++)
 391   3      		{
 392   4                 printf("%2.2bX ",valsout[i]);
 393   4      		}
 394   3              putchar(CR);
 395   3              putchar(LF);
 396   3      		if((valsout[1]&0x80)!=0x80)
 397   3      		{
 398   4      		   error_flag=card_inactive;
 399   4      		}
 400   3      		else
 401   3      		{
 402   4      		   if((valsout[1]&0xC0)==0xC0)
 403   4      		   {
 404   5      		      SD_Card_Type=High_Capacity;
 405   5      		      printf("High Capacity Card Detected\n\r");
 406   5      		   }
 407   4      		   else
 408   4      		   {
 409   5      		      SD_Card_Type=Standard_Capacity;
 410   5      			  printf("Standard Capacity Card Detected\n\r");
 411   5      			  LEDS_ON(Green_LED);  //GREENLED=0;
 412   5                    printf("CMD16 sent ... ");
 413   5                    SPI_Select_Clear(SD_Card_Select); //nCS0=0;  // SD card CS low
 414   5                    error_flag=SEND_COMMAND(CMD16,512);
 415   5      	          if(error_flag==no_errors)
 416   5                    {
 417   6                        error_flag=response(1,valsout);
 418   6      		          SPI_Select_Set(SD_Card_Select);  //nCS0=1;
 419   6                        LEDS_OFF(Green_LED); //GREENLED=1;
 420   6      	              printf("Response = %2.2bX \n\r",valsout[0]);
 421   6                        printf("Block size set to 512 bytes\n\r");
 422   6      		      }
 423   5      			}
 424   4      		 }
 425   3           }
 426   2           else
C51 COMPILER V6.02  SDCARD                                                                 11/21/2019 16:42:11 PAGE 8   

 427   2           {
 428   3              SPI_Select_Set(SD_Card_Select);  //nCS0=1;
 429   3              LEDS_OFF(Green_LED); //GREENLED=1;
 430   3      	    LEDS_ON(Red_LED); //REDLED=0;  // indicates error has occured.
 431   3           }
 432   2      	 if(error_flag!=no_errors)
 433   2      	 {
 434   3      	    error_status=error_flag;
 435   3      		print_error(error_status);
 436   3      	 }
 437   2         }
 438   1       if(error_status!=no_errors)
 439   1       {
 440   2      	print_error(error_status);
 441   2       }
 442   1      return error_status;
 443   1      }
 444          
 445          /**********************************************************************
 446          DESC:    Returns the SD card type
 447          RETURNS: SD_Card_Type
 448          CAUTION: SD card must be initialized first
 449          ************************************************************************/
 450          
 451          uint8_t Return_SD_Card_Type(void)
 452          {
 453   1         return SD_Card_Type;
 454   1      }
 455          
 456          /**********************************************************************
 457          DESC:    Prints an error text based on the error code
 458          RETURNS: nothing
 459          CAUTION: Mainly used for debugging
 460          ***********************************************************************/
 461          
 462          
 463          void print_error(uint8_t error)
 464          {
 465   1         if(error==sd_timeout_error) printf("SD Timeout Error");
 466   1         else if(error==illegal_cmnd) printf("Illegal Command\n\r");
 467   1         else if(error==response_error) printf("Response Error");
 468   1         else if(error==data_error) printf("Data Token Error");
 469   1         else if(error==voltage_error) printf("Incompatible Voltage");
 470   1         else if(error==card_inactive) printf("Card is Inactive");
 471   1         else if(error==SPI_error) printf("SPI or Timeout Error");
 472   1         else printf("Unknown Error");
 473   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1800    ----
   CONSTANT SIZE    =    526    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      48
   IDATA SIZE       =      1    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
