C51 COMPILER V6.02  EXP_4_MAIN                                                             11/21/2019 06:07:40 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE EXP_4_MAIN
OBJECT MODULE PLACED IN .\exp_4_main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\exp_4_main.c DEBUG OBJECTEXTEND PRINT(.\exp_4_main.lst) OBJECT(.\
                    -exp_4_main.obj) 

stmt level    source

   1          #include <stdio.h>
   2          #include "main.h"
   3          #include "PORT.H"
   4          #include "Directory_Functions_struct.h"
   5          #include "file_system.h"
   6          #include "LED_Control.h"
   7          #include "SPI.h"
   8          #include "SDCard.h"
   9          #include "print_bytes.h"
  10          #include "Timer0_hardware_delay_1ms.h"
  11          #include "UART.h"
  12          #include "LCD_Routines.h"
  13          //#include "Long_Serial_In.h"
  14          #include "Outputs.h"
  15          #include "player.h"
  16          #include "STA013_config.h"
  17          #include "I2C.h"
  18          #include "sEOS.h"
  19          
  20          xdata uint8_t buf1[512];
  21          xdata uint8_t buf2[512];
  22          uint8_t code LCD_str_start[]="Starting...";
  23          
  24          main()
  25          {
  26   1         uint8_t error_flag;
  27   1         // uint16_t temp16;
  28   1         // uint32_t entry_num, cwd_entries;
  29   1         // uint32_t cwd, clus;
  30   1      
  31   1         AUXR=0x0c;   // make all of XRAM available, ALE always on
  32   1         if(OSC_PER_INST==6)
  33   1         {
  34   2             CKCON0=0x01;  // set X2 clock mode
  35   2         }
  36   1         else if(OSC_PER_INST==12)
  37   1         {
  38   2             CKCON0=0x00;  // set standard clock mode
  39   2         }
  40   1      
  41   1         LEDS_ON(Red_LED);
  42   1         P2_set_bit(0x0F);
  43   1      
  44   1         Timer0_DELAY_1ms(300);
  45   1         uart_init(9600);
  46   1      
  47   1         if(STA013_init() != no_errors) while(1);
  48   1      
  49   1         LCD_Init();
  50   1         LCD_Print(0x00, sizeof(LCD_str_start)-1, LCD_str_start);
  51   1         printf("starting program...\n");
  52   1      
  53   1         // My SD card won't init at 400kHz, so using 200kHz
  54   1         error_flag=SPI_Master_Init(200000UL);
C51 COMPILER V6.02  EXP_4_MAIN                                                             11/21/2019 06:07:40 PAGE 2   

  55   1         if(error_flag!=no_errors)
  56   1         {
  57   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  58   2      	    UART_Transmit('S');
  59   2            while(1);
  60   2         }
  61   1         LEDS_ON(Amber_LED);
  62   1         // SD Card Initialization
  63   1         error_flag=SD_card_init();
  64   1         if(error_flag!=no_errors)
  65   1         {
  66   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  67   2      	  UART_Transmit('C');
  68   2            while(1);
  69   2         }
  70   1         LEDS_OFF(Amber_LED);
  71   1         error_flag=SPI_Master_Init(20000000UL);
  72   1         if(error_flag!=no_errors)
  73   1         {
  74   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  75   2      	    UART_Transmit('P');
  76   2            while(1);
  77   2         }
  78   1      
  79   1         printf("Mounting SD card\n");
  80   1         if(mount_drive(buf1) == MOUNT_SUCCESS)
  81   1         {
  82   2           printf("SD card mounted\n");
  83   2           LEDS_OFF(Red_LED);
  84   2           LEDS_ON(Green_LED);
  85   2         }
  86   1         else
  87   1         {
  88   2           printf("SD card failed to mount\n");
  89   2           while(1);
  90   2         }
  91   1      
  92   1         sEOS_init(12);
  93   1         while(1)loop_tester();
  94   1      
  95   1         // printf("Root directory:\n\n");
  96   1         // cwd = Export_Drive_values()->FirstRootDirSec; // start out at root directory
  97   1         //
  98   1         // while(1)
  99   1         // {
 100   1         //   cwd_entries = Print_Directory(cwd, buf1);
 101   1         //   printf("Enter an entry number: \n");
 102   1         //   entry_num = long_serial_input();
 103   1         //   printf("%lu  ", entry_num);
 104   1         //   printf("%lu  \n", cwd);
 105   1         //   // check to make sure entry is within the cwd
 106   1         //   if(entry_num <= cwd_entries)
 107   1         //   {
 108   1         //     clus = Read_Dir_Entry(cwd, entry_num, buf1);
 109   1         //     if(clus & directory_bit)
 110   1         //     {
 111   1         //       clus &= 0x0FFFFFFF; // mask off upper four bits to print another directory
 112   1         //       cwd = first_sector(clus);
 113   1         //     }
 114   1         //     else
 115   1         //     {
 116   1         //       init_player(clus, buf1);
C51 COMPILER V6.02  EXP_4_MAIN                                                             11/21/2019 06:07:40 PAGE 3   

 117   1         //     }
 118   1         //   }
 119   1         //   else
 120   1         //   {
 121   1         //     printf("Error: invalid entry choice\n");
 122   1         //   }
 123   1         // }
 124   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    213    ----
   CONSTANT SIZE    =     93    ----
   XDATA SIZE       =   1024    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
