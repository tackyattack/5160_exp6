C51 COMPILER V6.02  EXP_4_MAIN                                                             11/20/2019 15:30:07 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE EXP_4_MAIN
OBJECT MODULE PLACED IN .\exp_4_main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\exp_4_main.c DEBUG OBJECTEXTEND PRINT(.\exp_4_main.lst) OBJECT(.\
                    -exp_4_main.obj) 

stmt level    source

   1          #include <stdio.h>
   2          #include "main.h"
   3          #include "PORT.H"
   4          #include "Directory_Functions_struct.h"
   5          #include "file_system.h"
   6          #include "LED_Control.h"
   7          #include "SPI.h"
   8          #include "SDCard.h"
   9          #include "print_bytes.h"
  10          #include "Timer0_hardware_delay_1ms.h"
  11          #include "UART.h"
  12          #include "LCD_Routines.h"
  13          #include "Long_Serial_In.h"
  14          #include "Outputs.h"
  15          #include "player.h"
  16          #include "STA013_config.h"
  17          #include "I2C.h"
  18          
  19          xdata uint8_t buf1[512];
  20          xdata uint8_t buf2[512];
  21          uint8_t code LCD_str_start[]="Starting...";
  22          
  23          main()
  24          {
  25   1         uint8_t error_flag;
  26   1         uint32_t entry_num, cwd_entries;
  27   1         uint32_t cwd, clus;
  28   1      
  29   1         AUXR=0x0c;   // make all of XRAM available, ALE always on
  30   1         if(OSC_PER_INST==6)
  31   1         {
  32   2             CKCON0=0x01;  // set X2 clock mode
  33   2         }
  34   1         else if(OSC_PER_INST==12)
  35   1         {
  36   2             CKCON0=0x00;  // set standard clock mode
  37   2         }
  38   1      
  39   1         LEDS_ON(Red_LED);
  40   1         P2_set_bit(0x0F);
  41   1      
  42   1         Timer0_DELAY_1ms(300);
  43   1         uart_init(9600);
  44   1      
  45   1         if(STA013_init() != no_errors) while(1);
  46   1      
  47   1         LCD_Init();
  48   1         LCD_Print(0x00, sizeof(LCD_str_start)-1, LCD_str_start);
  49   1         printf("starting program...\n");
  50   1      
  51   1         // My SD card won't init at 400kHz, so using 200kHz
  52   1         error_flag=SPI_Master_Init(200000UL);
  53   1         if(error_flag!=no_errors)
  54   1         {
C51 COMPILER V6.02  EXP_4_MAIN                                                             11/20/2019 15:30:07 PAGE 2   

  55   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  56   2      	    UART_Transmit('S');
  57   2            while(1);
  58   2         }
  59   1         LEDS_ON(Amber_LED);
  60   1         // SD Card Initialization
  61   1         error_flag=SD_card_init();
  62   1         if(error_flag!=no_errors)
  63   1         {
  64   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  65   2      	  UART_Transmit('C');
  66   2            while(1);
  67   2         }
  68   1         LEDS_OFF(Amber_LED);
  69   1         error_flag=SPI_Master_Init(20000000UL);
  70   1         if(error_flag!=no_errors)
  71   1         {
  72   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  73   2      	    UART_Transmit('P');
  74   2            while(1);
  75   2         }
  76   1      
  77   1         printf("Mounting SD card\n");
  78   1         if(mount_drive(buf1) == MOUNT_SUCCESS)
  79   1         {
  80   2           printf("SD card mounted\n");
  81   2           LEDS_OFF(Red_LED);
  82   2           LEDS_ON(Green_LED);
  83   2         }
  84   1         else
  85   1         {
  86   2           printf("SD card failed to mount\n");
  87   2           while(1);
  88   2         }
  89   1      
  90   1         printf("Root directory:\n\n");
  91   1         cwd = Export_Drive_values()->FirstRootDirSec; // start out at root directory
  92   1      
  93   1         while(1)
  94   1         {
  95   2           cwd_entries = Print_Directory(cwd, buf1);
  96   2           printf("Enter an entry number: \n");
  97   2           entry_num = long_serial_input();
  98   2           printf("%lu  ", entry_num);
  99   2           printf("%lu  \n", cwd);
 100   2           // check to make sure entry is within the cwd
 101   2           if(entry_num <= cwd_entries)
 102   2           {
 103   3             clus = Read_Dir_Entry(cwd, entry_num, buf1);
 104   3             if(clus & directory_bit)
 105   3             {
 106   4               clus &= 0x0FFFFFFF; // mask off upper four bits to print another directory
 107   4               cwd = first_sector(clus);
 108   4             }
 109   3             else
 110   3             {
 111   4               //print_file(clus, buf1);
 112   4               init_player(clus);
 113   4             }
 114   3           }
 115   2           else
 116   2           {
C51 COMPILER V6.02  EXP_4_MAIN                                                             11/20/2019 15:30:07 PAGE 3   

 117   3             printf("Error: invalid entry choice\n");
 118   3           }
 119   2         }
 120   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    440    ----
   CONSTANT SIZE    =    178    ----
   XDATA SIZE       =   1024    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
