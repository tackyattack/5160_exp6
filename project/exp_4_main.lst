C51 COMPILER V6.02  EXP_4_MAIN                                                             11/20/2019 23:40:29 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE EXP_4_MAIN
OBJECT MODULE PLACED IN .\exp_4_main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\exp_4_main.c DEBUG OBJECTEXTEND PRINT(.\exp_4_main.lst) OBJECT(.\
                    -exp_4_main.obj) 

stmt level    source

   1          #include <stdio.h>
   2          #include "main.h"
   3          #include "PORT.H"
   4          #include "Directory_Functions_struct.h"
   5          #include "file_system.h"
   6          #include "LED_Control.h"
   7          #include "SPI.h"
   8          #include "SDCard.h"
   9          #include "print_bytes.h"
  10          #include "Timer0_hardware_delay_1ms.h"
  11          #include "UART.h"
  12          #include "LCD_Routines.h"
  13          #include "Long_Serial_In.h"
  14          #include "Outputs.h"
  15          #include "player.h"
  16          #include "STA013_config.h"
  17          #include "I2C.h"
  18          
  19          xdata uint8_t buf1[512];
  20          xdata uint8_t buf2[512];
  21          uint8_t code LCD_str_start[]="Starting...";
  22          
  23          main()
  24          {
  25   1         uint8_t error_flag;
  26   1         uint16_t temp16;
  27   1         uint32_t entry_num, cwd_entries;
  28   1         uint32_t cwd, clus;
  29   1      
  30   1         AUXR=0x0c;   // make all of XRAM available, ALE always on
  31   1         if(OSC_PER_INST==6)
  32   1         {
  33   2             CKCON0=0x01;  // set X2 clock mode
  34   2         }
  35   1         else if(OSC_PER_INST==12)
  36   1         {
  37   2             CKCON0=0x00;  // set standard clock mode
  38   2         }
  39   1      
  40   1         LEDS_ON(Red_LED);
  41   1         P2_set_bit(0x0F);
  42   1      
  43   1         Timer0_DELAY_1ms(300);
  44   1         uart_init(9600);
  45   1      
  46   1         if(STA013_init() != no_errors) while(1);
  47   1      
  48   1         LCD_Init();
  49   1         LCD_Print(0x00, sizeof(LCD_str_start)-1, LCD_str_start);
  50   1         printf("starting program...\n");
  51   1      
  52   1         // My SD card won't init at 400kHz, so using 200kHz
  53   1         error_flag=SPI_Master_Init(200000UL);
  54   1         if(error_flag!=no_errors)
C51 COMPILER V6.02  EXP_4_MAIN                                                             11/20/2019 23:40:29 PAGE 2   

  55   1         {
  56   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  57   2      	    UART_Transmit('S');
  58   2            while(1);
  59   2         }
  60   1         LEDS_ON(Amber_LED);
  61   1         // SD Card Initialization
  62   1         error_flag=SD_card_init();
  63   1         if(error_flag!=no_errors)
  64   1         {
  65   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  66   2      	  UART_Transmit('C');
  67   2            while(1);
  68   2         }
  69   1         LEDS_OFF(Amber_LED);
  70   1         error_flag=SPI_Master_Init(20000000UL);
  71   1         if(error_flag!=no_errors)
  72   1         {
  73   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  74   2      	    UART_Transmit('P');
  75   2            while(1);
  76   2         }
  77   1      
  78   1         printf("Mounting SD card\n");
  79   1         if(mount_drive(buf1) == MOUNT_SUCCESS)
  80   1         {
  81   2           printf("SD card mounted\n");
  82   2           LEDS_OFF(Red_LED);
  83   2           LEDS_ON(Green_LED);
  84   2         }
  85   1         else
  86   1         {
  87   2           printf("SD card failed to mount\n");
  88   2           while(1);
  89   2         }
  90   1      
  91   1         //sEOS_init(12);
  92   1      
  93   1         printf("Root directory:\n\n");
  94   1         cwd = Export_Drive_values()->FirstRootDirSec; // start out at root directory
  95   1      
  96   1         print_directory_init(cwd);
  97   1      
  98   1         while(1)
  99   1         {
 100   2           print_directory_task(&temp16);
 101   2           clus = get_directory_print_buffer_pos();
 102   2           for(temp16=0; temp16<clus; temp16++) putchar(buf2[temp16]);
 103   2           set_directory_print_buffer_pos(0);
 104   2         }
 105   1      
 106   1         while(1)
 107   1         {
 108   2           cwd_entries = Print_Directory(cwd, buf1);
 109   2           printf("Enter an entry number: \n");
 110   2           entry_num = long_serial_input();
 111   2           printf("%lu  ", entry_num);
 112   2           printf("%lu  \n", cwd);
 113   2           // check to make sure entry is within the cwd
 114   2           if(entry_num <= cwd_entries)
 115   2           {
 116   3             clus = Read_Dir_Entry(cwd, entry_num, buf1);
C51 COMPILER V6.02  EXP_4_MAIN                                                             11/20/2019 23:40:29 PAGE 3   

 117   3             if(clus & directory_bit)
 118   3             {
 119   4               clus &= 0x0FFFFFFF; // mask off upper four bits to print another directory
 120   4               cwd = first_sector(clus);
 121   4             }
 122   3             else
 123   3             {
 124   4               init_player(clus, buf1);
 125   4             }
 126   3           }
 127   2           else
 128   2           {
 129   3             printf("Error: invalid entry choice\n");
 130   3           }
 131   2         }
 132   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    530    ----
   CONSTANT SIZE    =    178    ----
   XDATA SIZE       =   1024    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      19
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
