C51 COMPILER V6.02  STA013_CONFIG                                                          11/20/2019 23:40:30 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE STA013_CONFIG
OBJECT MODULE PLACED IN .\STA013_config.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\STA013_config.c DEBUG OBJECTEXTEND PRINT(.\STA013_config.lst) OBJ
                    -ECT(.\STA013_config.obj) 

stmt level    source

   1          #include "main.h"
   2          #include "PORT.H"
   3          #include "I2C.h"
   4          #include "STA013_Config.h"
   5          #include <stdio.h>
   6          
   7          /************ Private Functions for STA013 Reset *********************/
   8          #define STA013_RESET_bit (1<<3)
   9          
  10          void Clear_P3_bit(uint8_t Bit_Data);
  11          void Set_P3_bit(uint8_t Bit_Data);
  12          /********************************************************************/
  13          
  14          void Clear_P3_bit(uint8_t Bit_Data)
  15          {
  16   1        P3&=(~Bit_Data);
  17   1      }
  18          
  19          
  20          void Set_P3_bit(uint8_t Bit_Data)
  21          {
  22   1        P3|=Bit_Data;
  23   1      }
  24          
  25          /********************************************************************/
  26          
  27          
  28          /***********************************************************************
  29          DESC:    Initializes the STA013 with the following steps:
  30                   Applies a hardware reset signal, checks the ID register for an 0xAC
  31          		 response and then sends the configuration data.
  32          RETURNS: error flag
  33          CAUTION: 
  34                    
  35          ************************************************************************/
  36          
  37          
  38          uint8_t STA013_init(void)
  39          {
  40   1         uint8_t error_flag, timeout, reg_addr;
  41   1         uint8_t idata send[3], rcv[3];
  42   1         uint8_t * config_data_p;
  43   1         uint16_t j;
  44   1      
  45   1      /***** Set up for STA013, XTAL=14.7456MHz, 512 oversampling ratio (STA013 datasheet, Table 12), I2S compat
             -ible,
  46   1             DLA and DRA 12dB attenutation, Data_Req active low,  ****/
  47   1         uint8_t code STA_cfg_addr[18]={0x54, 0x55,  6, 11,  82,  81, 101, 100, 80, 97, 0x05, 0x0d, 0x18, 0x0c, 
             -0x46, 0x48, 0x72};
  48   1         uint8_t code STA_cfg_data[18]={0x07, 0x10,  9,  2, 184,   0,   0,   0,  6,  5, 0xa1, 0x00, 0x04, 0x05, 
             -0x0C, 0x0C, 0x01};
  49   1      
  50   1         extern uint8_t code CONFIG;
  51   1         extern uint8_t code CONFIG2;
C51 COMPILER V6.02  STA013_CONFIG                                                          11/20/2019 23:40:30 PAGE 2   

  52   1      
  53   1         Clear_P3_bit(STA013_RESET_bit);  // Reset STA013
  54   1      
  55   1         send[0]=0x01;   // address of the ID reg.  
  56   1         timeout=50;
  57   1      
  58   1         Set_P3_bit(STA013_RESET_bit);    // make STA013 active
  59   1      
  60   1         do
  61   1         {
  62   2            //P3_4=0;          // Trigger for oscilloscope, if needed
  63   2            error_flag=I2C_Read(STA013,0,0,3,rcv);
  64   2            timeout--;
  65   2            //P3_4=1;         
  66   2         }while((error_flag!=no_errors)&&(timeout!=0));
  67   1      
  68   1         if(timeout!=0)
  69   1         {
  70   2             printf("Output from ID register: %2.2bX \n\r",rcv[2]);
  71   2         }
  72   1      
  73   1         do
  74   1         {
  75   2            //P3_4=0;          // Trigger for oscilloscope, if needed
  76   2            error_flag=I2C_Read(STA013,1,1,1,rcv);
  77   2            timeout--;
  78   2            //P3_4=1;         
  79   2         }while((error_flag!=no_errors)&&(timeout!=0));
  80   1         
  81   1         if(timeout!=0)
  82   1         {
  83   2             printf("Output from ID register: %2.2bX \n\r",rcv[0]);
  84   2         }
  85   1      
  86   1      
  87   1      
  88   1         if(rcv[0]==0xAC)
  89   1         {
  90   2      	 error_flag=I2C_Read(STA013,0x71,1,1,rcv);
  91   2           printf("STA013 SoftVersion: %2.2bX \n\r",rcv[0]); //Not needed. Used to check if software version cha
             -nged with config download
  92   2           j=0;
  93   2           config_data_p=&CONFIG;  // point to STA013 configuration file
  94   2           do
  95   2           {
  96   3              //reg_addr=*(config_data_p+j);   // Accessed using a pointer
  97   3              reg_addr=config_data_p[j];       // or accessed as an array
  98   3              j++;
  99   3              //send[0]=*(config_data_p+j);
 100   3              send[0]=config_data_p[j];
 101   3              j++;
 102   3      		if((j&0x3F)==0) printf(".");    // prints a dot periodically to indicate configuration download progress
 103   3              if(reg_addr!=0xff)
 104   3              {
 105   4                
 106   4                 timeout=50;
 107   4                 do
 108   4                 {
 109   5                     error_flag=I2C_Write(STA013,reg_addr,1,1,send);
 110   5                     timeout--;
 111   5                     if(timeout==0) AMBERLED=0;
 112   5                 }while((error_flag!=no_errors)&&(timeout!=0));
C51 COMPILER V6.02  STA013_CONFIG                                                          11/20/2019 23:40:30 PAGE 3   

 113   4              }
 114   3           }while((reg_addr!=0xff) && (timeout!=0));
 115   2           printf("\nFirst configuration file sent...\n");
 116   2           printf("Number of values written: %d \n",j>>1);
 117   2           j=0;
 118   2           config_data_p=&CONFIG2;  // point to STA013 configuration file
 119   2           do
 120   2           {
 121   3              reg_addr=*(config_data_p+j);      // Accessed using a pointer
 122   3              //reg_addr=config_data_p[j];      // or accessed as an array
 123   3              j++;
 124   3              send[0]=*(config_data_p+j);
 125   3              //send[0]=config_data_p[j];
 126   3              j++;
 127   3      		if((j&0x07)==0) printf(".");    // prints a dot periodically to indicate configuration download progress
 128   3              if(reg_addr!=0xff)
 129   3              {
 130   4                 timeout=50;
 131   4                 do
 132   4                 {
 133   5                     error_flag=I2C_Write(STA013,reg_addr,1,1,send);
 134   5                     timeout--;
 135   5                     if(timeout==0) AMBERLED=0;
 136   5                 }while((error_flag!=no_errors)&&(timeout!=0));
 137   4              }
 138   3           }while((reg_addr!=0xff) && (timeout!=0));
 139   2      	 printf("\nSecond configuration file sent...\n");
 140   2           printf("Number of values written: %d \n",j>>1);
 141   2      	 error_flag=I2C_Read(STA013,0x71,1,1,rcv);
 142   2           printf("STA013 SoftVersion: %2.2bX \n\r",rcv[0]); // Determined that software version did not change 
             -           
 143   2              
 144   2           /***** Set up for STA013, XTAL=14.7456MHz, 512 oversampling ratio (STA013 datasheet, Table 12), I2S c
             -ompatible,
 145   2                   DLA and DRA 12dB attenutation, Data_Req active low,  ****/
 146   2            for(j=0;j<17;j++)
 147   2      	  {
 148   3      	    reg_addr=STA_cfg_addr[j];
 149   3      	    send[0]=STA_cfg_data[j];
 150   3              timeout=50;
 151   3              do
 152   3              {
 153   4                  error_flag=I2C_Write(STA013,reg_addr,1,1,send);
 154   4                  timeout--;
 155   4                  if(timeout==0) AMBERLED=0;
 156   4              }while((error_flag!=no_errors)&&(timeout!=0));
 157   3      		printf("Sent to STA013: %2.2bX  %2.2bX \n\r",reg_addr,send[0]);
 158   3      		reg_addr=STA_cfg_addr[j];
 159   3              /**** Read and print the set up values to verify the values. ****/
 160   3              error_flag=I2C_Read(STA013,reg_addr,1,1,rcv);
 161   3              printf("Output from register: %2.2bX  %2.2bX %2.2bX \n\r",reg_addr,rcv[0],error_flag);
 162   3      	  }
 163   2            printf("Configuration Complete\n\r");
 164   2         }      
 165   1         return error_flag;
 166   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    738    ----
   CONSTANT SIZE    =    311    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V6.02  STA013_CONFIG                                                          11/20/2019 23:40:30 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----       6
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
