C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             11/21/2019 16:42:11 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE DIRECTORY_FUNCTIONS_STRUCT
OBJECT MODULE PLACED IN .\Directory_Functions_struct.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\Directory_Functions_struct.c PRINT(.\Directory_Functions_struct.l
                    -st) OBJECT(.\Directory_Functions_struct.obj) 

stmt level    source

   1          #include "AT89C51RC2.h"
   2          #include <stdio.h>
   3          #include "main.h"
   4          #include "PORT.H"
   5          #include "UART.h"
   6          #include "SPI.h"
   7          #include "SDCard.h"
   8          #include "File_System.h"
   9          #include "print_bytes.h"
  10          #include "Directory_Functions_struct.h"
  11          #include "sector_reader.h"
  12          
  13          
  14          
  15          FS_values_t idata Drive_values;
  16          
  17          /***********************************************************************
  18          DESC: Returns a pointer to the global structure Drive_values to export to other files
  19          INPUT: void
  20          RETURNS: Pointer to the structure Drive_values
  21          CAUTION:
  22          ************************************************************************/
  23          
  24          FS_values_t * Export_Drive_values(void)
  25          {
  26   1         return &Drive_values;
  27   1      }
  28          
  29          
  30          /***********************************************************************
  31          DESC: Prints all short file name entries for a given directory
  32          INPUT: Starting Sector of the directory and the pointer to a
  33          block of memory in xdata that can be used to read blocks from the SD card
  34          RETURNS: uint16_t number of entries found in the directory
  35          CAUTION: Supports FAT16, SD_shift must be set before using this function
  36          ************************************************************************/
  37          
  38          
  39          
  40          uint16_t  Print_Directory(uint32_t Sector_num, uint8_t xdata * array_in)
  41          {
  42   1         uint32_t Sector, max_sectors;
  43   1         uint16_t i, entries;
  44   1         uint8_t temp8, j, attr, out_val, error_flag;
  45   1         uint8_t * values;
  46   1      
  47   1      
  48   1         values=array_in;
  49   1         entries=0;
  50   1         i=0;
  51   1         if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
  52   1         {
  53   2            max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
  54   2         }
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             11/21/2019 16:42:11 PAGE 2   

  55   1         else
  56   1         {
  57   2            max_sectors=Drive_values.SecPerClus;
  58   2         }
  59   1         Sector=Sector_num;
  60   1         error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
  61   1         if(error_flag==no_errors)
  62   1         {
  63   2           do
  64   2           {
  65   3              temp8=read8(0+i,values);  // read first byte to see if empty
  66   3              if((temp8!=0xE5)&&(temp8!=0x00))
  67   3      	    {
  68   4      	       attr=read8(0x0b+i,values);
  69   4      		   if((attr&0x0E)==0)   // if hidden, system or Vol_ID bit is set do not print
  70   4      		   {
  71   5      		      entries++;
  72   5      			  printf("%5d. ",entries);  // print entry number with a fixed width specifier
  73   5      		      for(j=0;j<8;j++)
  74   5      			  {
  75   6      			     out_val=read8(i+j,values);   // print the 8 byte name
  76   6      			     putchar(out_val);
  77   6      			  }
  78   5                    if((attr&0x10)==0x10)  // indicates directory
  79   5      			  {
  80   6      			     for(j=8;j<11;j++)
  81   6      			     {
  82   7      			        out_val=read8(i+j,values);
  83   7      			        putchar(out_val);
  84   7      			     }
  85   6      			     printf("[DIR]\n");
  86   6      			  }
  87   5      			  else       // print a period and the three byte extension for a file
  88   5      			  {
  89   6      			     putchar(0x2E);
  90   6      			     for(j=8;j<11;j++)
  91   6      			     {
  92   7      			        out_val=read8(i+j,values);
  93   7      			        putchar(out_val);
  94   7      			     }
  95   6      			     putchar(0x0d);
  96   6                       putchar(0x0a);
  97   6      			  }
  98   5      		    }
  99   4      		}
 100   3      		    i=i+32;  // next entry
 101   3      		    if(i>510)
 102   3      		    {
 103   4      			  Sector++;
 104   4                    if((Sector-Sector_num)<max_sectors)
 105   4      			  {
 106   5                       error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
 107   5      			     if(error_flag!=no_errors)
 108   5      			     {
 109   6      			        entries=0;   // no entries found indicates disk read error
 110   6      				    temp8=0;     // forces a function exit
 111   6      			     }
 112   5                       i=0;
 113   5      			  }
 114   4      			  else
 115   4      			  {
 116   5      			     entries=entries|more_entries;  // set msb to indicate more entries in another cluster
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             11/21/2019 16:42:11 PAGE 3   

 117   5      			     temp8=0;                       // forces a function exit
 118   5      			  }
 119   4      		    }
 120   3      
 121   3      	  }while(temp8!=0);
 122   2      	}
 123   1      	else
 124   1      	{
 125   2      	   entries=0;    // no entries found indicates disk read error
 126   2      	}
 127   1         return entries;
 128   1       }
 129          
 130          
 131          /***********************************************************************
 132          DESC: Uses the same method as Print_Directory to locate short file names,
 133                but locates a specified entry and returns and cluster
 134          INPUT: Starting Sector of the directory, an entry number and a pointer to a
 135          block of memory in xdata that can be used to read blocks from the SD card
 136          RETURNS: uint32_t with cluster in lower 28 bits.  Bit 28 set if this is
 137                   a directory entry, clear for a file.  Bit 31 set for error.
 138          CAUTION:
 139          ************************************************************************/
 140          
 141          uint32_t Read_Dir_Entry(uint32_t Sector_num, uint16_t Entry, uint8_t xdata * array_in)
 142          {
 143   1         uint32_t Sector, max_sectors, return_clus;
 144   1         uint16_t i, entries;
 145   1         uint8_t temp8, attr, error_flag;
 146   1         uint8_t * values;
 147   1      
 148   1         values=array_in;
 149   1         entries=0;
 150   1         i=0;
 151   1         return_clus=0;
 152   1         if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
 153   1         {
 154   2            max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
 155   2         }
 156   1         else
 157   1         {
 158   2            max_sectors=Drive_values.SecPerClus;
 159   2         }
 160   1         Sector=Sector_num;
 161   1         error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
 162   1         if(error_flag==no_errors)
 163   1         {
 164   2           do
 165   2           {
 166   3              temp8=read8(0+i,values);  // read first byte to see if empty
 167   3              if((temp8!=0xE5)&&(temp8!=0x00))
 168   3      	    {
 169   4      	       attr=read8(0x0b+i,values);
 170   4      		   if((attr&0x0E)==0)    // if hidden do not print
 171   4      		   {
 172   5      		      entries++;
 173   5                    if(entries==Entry)
 174   5                    {
 175   6      			    if(Drive_values.FATtype==FAT32)
 176   6                      {
 177   7                         return_clus=read8(21+i,values);
 178   7      				   return_clus=return_clus<<8;
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             11/21/2019 16:42:11 PAGE 4   

 179   7                         return_clus|=read8(20+i,values);
 180   7                         return_clus=return_clus<<8;
 181   7                      }
 182   6                      return_clus|=read8(27+i,values);
 183   6      			    return_clus=return_clus<<8;
 184   6                      return_clus|=read8(26+i,values);
 185   6      			    attr=read8(0x0b+i,values);
 186   6      			    if(attr&0x10) return_clus|=directory_bit;
 187   6                      temp8=0;    // forces a function exit
 188   6                    }
 189   5      
 190   5      		    }
 191   4      		}
 192   3      		    i=i+32;  // next entry
 193   3      		    if(i>510)
 194   3      		    {
 195   4      			  Sector++;
 196   4      			  if((Sector-Sector_num)<max_sectors)
 197   4      			  {
 198   5                       error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
 199   5      			     if(error_flag!=no_errors)
 200   5      			     {
 201   6      			         return_clus=no_entry_found;
 202   6                           temp8=0;
 203   6      			     }
 204   5      			     i=0;
 205   5      			  }
 206   4      			  else
 207   4      			  {
 208   5      			     temp8=0;                       // forces a function exit
 209   5      			  }
 210   4      		    }
 211   3      
 212   3      	  }while(temp8!=0);
 213   2      	}
 214   1      	else
 215   1      	{
 216   2      	   return_clus=no_entry_found;
 217   2      	}
 218   1      	if(return_clus==0) return_clus=no_entry_found;
 219   1         return return_clus;
 220   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1130    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      56
   IDATA SIZE       =     22    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
